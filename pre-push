#!/bin/sh

HOOKNAME=pre-push

# get hook args
read local_ref local_sha remote_ref remote_sha;

# ignore push to other branches or tags
if ! echo "$remote_ref" | grep -e master -e main; then
    echo [$HOOKNAME] ignoring $remote_ref
    exit
fi

# we use this to list commits in our merged feature branch. they are
# merged, so they only don't exist in the remote branch.
CURRENT_REMOTE=$(git rev-parse --abbrev-ref --symbolic-full-name @{u})
CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)

# $ git merge test4
# b9ea837 (HEAD -> master, test4) HEAD@{0}: merge test4: Fast-forward
#
# $ git merge test5 --no-ff
#Â 0bdc444 (HEAD -> master) HEAD@{0}: merge test5: Merge made by the 'ort' strategy.
#
REFLOG_MERGE=$(git reflog -1 | grep "HEAD@{0}: merge" 2>/dev/null)
if [ $? -eq 0 ]; then
    echo [$HOOKNAME] detected merge: $REFLOG_MERGE
    MERGED_BRANCH=$(echo $REFLOG_MERGE | sed -r 's/^([a-z0-9]{7}) HEAD\@\{0\}: merge (.*):.*/\2/g')
    echo [$HOOKNAME] detected branch: $MERGED_BRANCH
fi

# if the last action was a squash commit, which is harder because it's just a
# commit with the text Squash.
#
# $ git reflog -1
# 0d0f8a5 (HEAD -> test4) HEAD@{0}: commit: Squashed commit of the following:
#
REFLOG_SQUASH=$(git reflog -1 | grep "HEAD@{0}: commit: Squashed" 2>/dev/null)
if [ $? -eq 0 ]; then
    echo [$HOOKNAME] detected squash commit: $REFLOG_SQUASH
    MERGED_BRANCH=$(git log -1 2>/dev/null \
        | grep branch_created \
        | grep -v "$CURRENT_BRANCH" \
        | awk '{print $2}' \
        | sort \
        | uniq \
        | head -1)
    echo [$HOOKNAME] detected branch: $MERGED_BRANCH
fi

# double check and exit to avoid mess
if [ "$MERGED_BRANCH" = "" ]; then
  exit
fi;

# multiple users may have contributed to the branch, we find the oldest one from the commit-message
OLDEST_BRANCH_TIMESTAMP=$(git log "$MERGED_BRANCH" ^"$CURRENT_REMOTE"  \
    | grep "time_branch_created $MERGED_BRANCH" \
    | grep -v "$CURRENT_BRANCH" \
    | awk '{print $3}' \
    | sort \
    | head -1)
if [ "$OLDEST_BRANCH_TIMESTAMP" = "" ]; then
    exit
fi;

NOW=$(date +%s)
BRANCH_AGE=$((NOW-OLDEST_BRANCH_TIMESTAMP))

TAG_NAME=time_$(git rev-parse --short HEAD)_${MERGED_BRANCH}
TAG_MSG=$(printf '%dd:%dh:%dm secs=%d' $((BRANCH_AGE/86400)) $((BRANCH_AGE%86400/3600)) $((BRANCH_AGE%3600/60)) $BRANCH_AGE)

git tag -a $TAG_NAME -m "$TAG_MSG"
echo [$HOOKNAME] tag added: $TAG_NAME $TAG_MSG

git push origin $TAG_NAME
echo [$HOOKNAME] tag pushed: $TAG_NAME $TAG_MSG

